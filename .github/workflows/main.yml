on:
  push:
    branches: [ master ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
    if: ${{ !startsWith(github.event.head_commit.message, 'docs:') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Cache gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Install NDK
        run: |
            ${ANDROID_HOME}/tools/bin/sdkmanager --list --channel=1
            echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;23.0.7599858" --sdk_root=${ANDROID_SDK_ROOT} --channel=1

      - name: Gradle prebuild
        run: ./gradlew prebuild

      - name: Build release
        id: buildRelease
        run: |
          ./gradlew :app:assembleRelease
          echo "::set-output name=releaseName::`ls app/build/outputs/apk/release/*-release.apk | awk -F '(/|.apk)' '{print $6}'`"

      - name: Build debug
        id: buildDebug
        run: |
          ./gradlew :app:assembleDebug
          echo "::set-output name=debugName::`ls app/build/outputs/apk/debug/*-debug.apk | awk -F '(/|.apk)' '{print $6}'`"

      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGN_FILE_BASE64 }}
          alias: ${{ secrets.SIGN_ALIAS }}
          keyStorePassword: ${{ secrets.SIGN_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.SIGN_KEY_PASSWORD }}

      - name: Get Date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Upload release
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: applist_detector_snapshot_release_${{ steps.date.outputs.date }}.apk
          path: ${{steps.sign_app.outputs.signedReleaseFile}}

      - name: Upload debug
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: applist_detector_snapshot_debug_${{ steps.date.outputs.date }}.apk
          path: "app/build/outputs/apk/debug/*.apk"

      - name: Upload mappings
        uses: actions/upload-artifact@v2
        with:
          name: mappings
          path: "app/build/outputs/mapping/release"

      - name: Post to channel
        if: ${{ github.event_name != 'pull_request' && success() && github.ref == 'refs/heads/master' }}
        env:
          CHANNEL_ID: ${{ secrets.TELEGRAM_TO }}
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          OUTPUT="app/build/outputs/apk/"
          export release=${{steps.sign_app.outputs.signedReleaseFile}}
          export debug=$(find $OUTPUT -name "*-debug.apk")
          ESCAPED=`python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ["COMMIT_MESSAGE"]); print(urllib.parse.quote(msg if len(msg) <= 1024 else json.dumps(os.environ["COMMIT_URL"])))'`
          curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://release%22%7D,%7B%22type%22:%22document%22,%20%22media%22:%22attach://debug%22,%22caption%22:${ESCAPED}%7D%5D"  -F release="@$release" -F debug="@$debug"
